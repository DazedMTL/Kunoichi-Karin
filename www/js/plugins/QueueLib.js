// Generated by CoffeeScript 1.10.0

/*:
 * @plugindesc Queue製スクリプト用 汎用ライブラリ
 * @author queue
 *
 * @help
 * 他のQueue製スクリプトの前にインポートしてください。
 */

(function () {
  this.Imported = this.Imported || {};

  this.Imported.Queue_Lib = true;

  this.QueueLib = {};

  Window_Base.prototype.obtainEscapeStringParam = function (textState) {
    var arr;
    arr = /^\[[^\]]+\]/.exec(textState.text.slice(textState.index));
    if (arr) {
      textState.index += arr[0].length;
      return arr[0].slice(1).slice(0, -1);
    } else {
      return "";
    }
  };

  this.QueueLib.parseNumberTag = function (key, text, def) {
    if (def == null) {
      def = 0.0;
    }
    if (text.match(RegExp("<" + key + ":([+-]?[\\d.]+)>"))) {
      return Number(RegExp.$1);
    } else {
      return def;
    }
  };

  this.QueueLib.parseStringTag = function (key, text) {
    if (text.match(RegExp("<" + key + ">([\\s\\S]*?)</" + key + ">"))) {
      return RegExp.$1.substring(1);
    } else {
      return "";
    }
  };

  this.QueueLib.calcTotalExEffect = function (keyName) {
    var actor, i, id, item, j, len, len1, notes, num, ref, ref1, stateId, total;
    notes = [1.0];
    notes.push(
      (function () {
        var ref, results;
        ref = $gameParty._items;
        results = [];
        for (id in ref) {
          num = ref[id];
          results.push(
            QueueLib.parseNumberTag(keyName, $dataItems[id].note, 1.0)
          );
        }
        return results;
      })()
    );
    ref = $gameParty.members();
    for (i = 0, len = ref.length; i < len; i++) {
      actor = ref[i];
      notes.push(
        (function () {
          var j, len1, ref1, results;
          ref1 = actor.equips();
          results = [];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            item = ref1[j];
            if (item != null) {
              results.push(QueueLib.parseNumberTag(keyName, item.note, 1.0));
            }
          }
          return results;
        })()
      );
    }
    ref1 = $gameParty.members();
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      actor = ref1[j];
      notes.push(
        (function () {
          var k, len2, ref2, results;
          ref2 = actor._states;
          results = [];
          for (k = 0, len2 = ref2.length; k < len2; k++) {
            stateId = ref2[k];
            results.push(
              QueueLib.parseNumberTag(keyName, $dataStates[stateId].note, 1.0)
            );
          }
          return results;
        })()
      );
    }
    notes = Array.prototype.concat.apply([], notes);
    total = notes.reduce(function (t, s) {
      return t * s;
    });
    return total;
  };
}).call(this);
